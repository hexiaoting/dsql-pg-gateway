/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StatestoreService_H
#define StatestoreService_H

#include <thrift/TDispatchProcessor.h>
#include "StatestoreService_types.h"

namespace impala {

class StatestoreServiceIf {
 public:
  virtual ~StatestoreServiceIf() {}
  virtual void RegisterSubscriber(TRegisterSubscriberResponse& _return, const TRegisterSubscriberRequest& params) = 0;
};

class StatestoreServiceIfFactory {
 public:
  typedef StatestoreServiceIf Handler;

  virtual ~StatestoreServiceIfFactory() {}

  virtual StatestoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(StatestoreServiceIf* /* handler */) = 0;
};

class StatestoreServiceIfSingletonFactory : virtual public StatestoreServiceIfFactory {
 public:
  StatestoreServiceIfSingletonFactory(const boost::shared_ptr<StatestoreServiceIf>& iface) : iface_(iface) {}
  virtual ~StatestoreServiceIfSingletonFactory() {}

  virtual StatestoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(StatestoreServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<StatestoreServiceIf> iface_;
};

class StatestoreServiceNull : virtual public StatestoreServiceIf {
 public:
  virtual ~StatestoreServiceNull() {}
  void RegisterSubscriber(TRegisterSubscriberResponse& /* _return */, const TRegisterSubscriberRequest& /* params */) {
    return;
  }
};

typedef struct _StatestoreService_RegisterSubscriber_args__isset {
  _StatestoreService_RegisterSubscriber_args__isset() : params(false) {}
  bool params;
} _StatestoreService_RegisterSubscriber_args__isset;

class StatestoreService_RegisterSubscriber_args {
 public:

  StatestoreService_RegisterSubscriber_args() {
  }

  virtual ~StatestoreService_RegisterSubscriber_args() throw() {}

  TRegisterSubscriberRequest params;

  _StatestoreService_RegisterSubscriber_args__isset __isset;

  void __set_params(const TRegisterSubscriberRequest& val) {
    params = val;
    __isset.params = true;
  }

  bool operator == (const StatestoreService_RegisterSubscriber_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const StatestoreService_RegisterSubscriber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatestoreService_RegisterSubscriber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StatestoreService_RegisterSubscriber_pargs {
 public:


  virtual ~StatestoreService_RegisterSubscriber_pargs() throw() {}

  const TRegisterSubscriberRequest* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StatestoreService_RegisterSubscriber_result__isset {
  _StatestoreService_RegisterSubscriber_result__isset() : success(false) {}
  bool success;
} _StatestoreService_RegisterSubscriber_result__isset;

class StatestoreService_RegisterSubscriber_result {
 public:

  StatestoreService_RegisterSubscriber_result() {
  }

  virtual ~StatestoreService_RegisterSubscriber_result() throw() {}

  TRegisterSubscriberResponse success;

  _StatestoreService_RegisterSubscriber_result__isset __isset;

  void __set_success(const TRegisterSubscriberResponse& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const StatestoreService_RegisterSubscriber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StatestoreService_RegisterSubscriber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatestoreService_RegisterSubscriber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StatestoreService_RegisterSubscriber_presult__isset {
  _StatestoreService_RegisterSubscriber_presult__isset() : success(false) {}
  bool success;
} _StatestoreService_RegisterSubscriber_presult__isset;

class StatestoreService_RegisterSubscriber_presult {
 public:


  virtual ~StatestoreService_RegisterSubscriber_presult() throw() {}

  TRegisterSubscriberResponse* success;

  _StatestoreService_RegisterSubscriber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class StatestoreServiceClient : virtual public StatestoreServiceIf {
 public:
  StatestoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  StatestoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void RegisterSubscriber(TRegisterSubscriberResponse& _return, const TRegisterSubscriberRequest& params);
  void send_RegisterSubscriber(const TRegisterSubscriberRequest& params);
  void recv_RegisterSubscriber(TRegisterSubscriberResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class StatestoreServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<StatestoreServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (StatestoreServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_RegisterSubscriber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StatestoreServiceProcessor(boost::shared_ptr<StatestoreServiceIf> iface) :
    iface_(iface) {
    processMap_["RegisterSubscriber"] = &StatestoreServiceProcessor::process_RegisterSubscriber;
  }

  virtual ~StatestoreServiceProcessor() {}
};

class StatestoreServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StatestoreServiceProcessorFactory(const ::boost::shared_ptr< StatestoreServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< StatestoreServiceIfFactory > handlerFactory_;
};

class StatestoreServiceMultiface : virtual public StatestoreServiceIf {
 public:
  StatestoreServiceMultiface(std::vector<boost::shared_ptr<StatestoreServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~StatestoreServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<StatestoreServiceIf> > ifaces_;
  StatestoreServiceMultiface() {}
  void add(boost::shared_ptr<StatestoreServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void RegisterSubscriber(TRegisterSubscriberResponse& _return, const TRegisterSubscriberRequest& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegisterSubscriber(_return, params);
    }
    ifaces_[i]->RegisterSubscriber(_return, params);
    return;
  }

};

} // namespace

#endif
