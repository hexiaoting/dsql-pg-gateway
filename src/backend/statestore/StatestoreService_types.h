/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StatestoreService_TYPES_H
#define StatestoreService_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Status_types.h"
#include "Types_types.h"


namespace impala {

struct StatestoreServiceVersion {
  enum type {
    V1 = 0
  };
};

extern const std::map<int, const char*> _StatestoreServiceVersion_VALUES_TO_NAMES;


class TPoolStats {
 public:

  static const char* ascii_fingerprint; // = "66C8E6F97F0275919D86FEB536251B17";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xC8,0xE6,0xF9,0x7F,0x02,0x75,0x91,0x9D,0x86,0xFE,0xB5,0x36,0x25,0x1B,0x17};

  TPoolStats() : num_running(0), num_queued(0), mem_usage(0), mem_estimate(0) {
  }

  virtual ~TPoolStats() throw() {}

  int64_t num_running;
  int64_t num_queued;
  int64_t mem_usage;
  int64_t mem_estimate;

  void __set_num_running(const int64_t val) {
    num_running = val;
  }

  void __set_num_queued(const int64_t val) {
    num_queued = val;
  }

  void __set_mem_usage(const int64_t val) {
    mem_usage = val;
  }

  void __set_mem_estimate(const int64_t val) {
    mem_estimate = val;
  }

  bool operator == (const TPoolStats & rhs) const
  {
    if (!(num_running == rhs.num_running))
      return false;
    if (!(num_queued == rhs.num_queued))
      return false;
    if (!(mem_usage == rhs.mem_usage))
      return false;
    if (!(mem_estimate == rhs.mem_estimate))
      return false;
    return true;
  }
  bool operator != (const TPoolStats &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPoolStats & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPoolStats &a, TPoolStats &b);

typedef struct _TBackendDescriptor__isset {
  _TBackendDescriptor__isset() : debug_http_address(false), secure_webserver(false) {}
  bool debug_http_address;
  bool secure_webserver;
} _TBackendDescriptor__isset;

class TBackendDescriptor {
 public:

  static const char* ascii_fingerprint; // = "EA990A0C512F7B2D90DF4141EAC57F24";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x99,0x0A,0x0C,0x51,0x2F,0x7B,0x2D,0x90,0xDF,0x41,0x41,0xEA,0xC5,0x7F,0x24};

  TBackendDescriptor() : ip_address(), secure_webserver(0) {
  }

  virtual ~TBackendDescriptor() throw() {}

   ::impala::TNetworkAddress address;
  std::string ip_address;
   ::impala::TNetworkAddress debug_http_address;
  bool secure_webserver;

  _TBackendDescriptor__isset __isset;

  void __set_address(const  ::impala::TNetworkAddress& val) {
    address = val;
  }

  void __set_ip_address(const std::string& val) {
    ip_address = val;
  }

  void __set_debug_http_address(const  ::impala::TNetworkAddress& val) {
    debug_http_address = val;
    __isset.debug_http_address = true;
  }

  void __set_secure_webserver(const bool val) {
    secure_webserver = val;
    __isset.secure_webserver = true;
  }

  bool operator == (const TBackendDescriptor & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(ip_address == rhs.ip_address))
      return false;
    if (__isset.debug_http_address != rhs.__isset.debug_http_address)
      return false;
    else if (__isset.debug_http_address && !(debug_http_address == rhs.debug_http_address))
      return false;
    if (__isset.secure_webserver != rhs.__isset.secure_webserver)
      return false;
    else if (__isset.secure_webserver && !(secure_webserver == rhs.secure_webserver))
      return false;
    return true;
  }
  bool operator != (const TBackendDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TBackendDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TBackendDescriptor &a, TBackendDescriptor &b);


class TCatalogDescriptor {
 public:

  static const char* ascii_fingerprint; // = "E284A96D78462CB63C99DEFFFCBF42D0";
  static const uint8_t binary_fingerprint[16]; // = {0xE2,0x84,0xA9,0x6D,0x78,0x46,0x2C,0xB6,0x3C,0x99,0xDE,0xFF,0xFC,0xBF,0x42,0xD0};

  TCatalogDescriptor() : is_master(0) {
  }

  virtual ~TCatalogDescriptor() throw() {}

   ::impala::TNetworkAddress address;
  bool is_master;

  void __set_address(const  ::impala::TNetworkAddress& val) {
    address = val;
  }

  void __set_is_master(const bool val) {
    is_master = val;
  }

  bool operator == (const TCatalogDescriptor & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(is_master == rhs.is_master))
      return false;
    return true;
  }
  bool operator != (const TCatalogDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCatalogDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCatalogDescriptor &a, TCatalogDescriptor &b);


class TTopicItem {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TTopicItem() : key(), value() {
  }

  virtual ~TTopicItem() throw() {}

  std::string key;
  std::string value;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const TTopicItem & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TTopicItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTopicItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TTopicItem &a, TTopicItem &b);

typedef struct _TTopicDelta__isset {
  _TTopicDelta__isset() : from_version(false), to_version(false), min_subscriber_topic_version(false) {}
  bool from_version;
  bool to_version;
  bool min_subscriber_topic_version;
} _TTopicDelta__isset;

class TTopicDelta {
 public:

  static const char* ascii_fingerprint; // = "8B024CE7417C0CAA8AC30C26B17A11FC";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0x02,0x4C,0xE7,0x41,0x7C,0x0C,0xAA,0x8A,0xC3,0x0C,0x26,0xB1,0x7A,0x11,0xFC};

  TTopicDelta() : topic_name(), is_delta(0), from_version(0), to_version(0), min_subscriber_topic_version(0) {
  }

  virtual ~TTopicDelta() throw() {}

  std::string topic_name;
  std::vector<TTopicItem>  topic_entries;
  std::vector<std::string>  topic_deletions;
  bool is_delta;
  int64_t from_version;
  int64_t to_version;
  int64_t min_subscriber_topic_version;

  _TTopicDelta__isset __isset;

  void __set_topic_name(const std::string& val) {
    topic_name = val;
  }

  void __set_topic_entries(const std::vector<TTopicItem> & val) {
    topic_entries = val;
  }

  void __set_topic_deletions(const std::vector<std::string> & val) {
    topic_deletions = val;
  }

  void __set_is_delta(const bool val) {
    is_delta = val;
  }

  void __set_from_version(const int64_t val) {
    from_version = val;
    __isset.from_version = true;
  }

  void __set_to_version(const int64_t val) {
    to_version = val;
    __isset.to_version = true;
  }

  void __set_min_subscriber_topic_version(const int64_t val) {
    min_subscriber_topic_version = val;
    __isset.min_subscriber_topic_version = true;
  }

  bool operator == (const TTopicDelta & rhs) const
  {
    if (!(topic_name == rhs.topic_name))
      return false;
    if (!(topic_entries == rhs.topic_entries))
      return false;
    if (!(topic_deletions == rhs.topic_deletions))
      return false;
    if (!(is_delta == rhs.is_delta))
      return false;
    if (__isset.from_version != rhs.__isset.from_version)
      return false;
    else if (__isset.from_version && !(from_version == rhs.from_version))
      return false;
    if (__isset.to_version != rhs.__isset.to_version)
      return false;
    else if (__isset.to_version && !(to_version == rhs.to_version))
      return false;
    if (__isset.min_subscriber_topic_version != rhs.__isset.min_subscriber_topic_version)
      return false;
    else if (__isset.min_subscriber_topic_version && !(min_subscriber_topic_version == rhs.min_subscriber_topic_version))
      return false;
    return true;
  }
  bool operator != (const TTopicDelta &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTopicDelta & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TTopicDelta &a, TTopicDelta &b);


class TTopicRegistration {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

  TTopicRegistration() : topic_name(), is_transient(0) {
  }

  virtual ~TTopicRegistration() throw() {}

  std::string topic_name;
  bool is_transient;

  void __set_topic_name(const std::string& val) {
    topic_name = val;
  }

  void __set_is_transient(const bool val) {
    is_transient = val;
  }

  bool operator == (const TTopicRegistration & rhs) const
  {
    if (!(topic_name == rhs.topic_name))
      return false;
    if (!(is_transient == rhs.is_transient))
      return false;
    return true;
  }
  bool operator != (const TTopicRegistration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTopicRegistration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TTopicRegistration &a, TTopicRegistration &b);


class TRegisterSubscriberRequest {
 public:

  static const char* ascii_fingerprint; // = "79FBAF663F4F9AC94F2386BD4840E86A";
  static const uint8_t binary_fingerprint[16]; // = {0x79,0xFB,0xAF,0x66,0x3F,0x4F,0x9A,0xC9,0x4F,0x23,0x86,0xBD,0x48,0x40,0xE8,0x6A};

  TRegisterSubscriberRequest() : protocol_version((StatestoreServiceVersion::type)0), subscriber_id() {
    protocol_version = (StatestoreServiceVersion::type)0;

  }

  virtual ~TRegisterSubscriberRequest() throw() {}

  StatestoreServiceVersion::type protocol_version;
  std::string subscriber_id;
   ::impala::TNetworkAddress subscriber_location;
  std::vector<TTopicRegistration>  topic_registrations;

  void __set_protocol_version(const StatestoreServiceVersion::type val) {
    protocol_version = val;
  }

  void __set_subscriber_id(const std::string& val) {
    subscriber_id = val;
  }

  void __set_subscriber_location(const  ::impala::TNetworkAddress& val) {
    subscriber_location = val;
  }

  void __set_topic_registrations(const std::vector<TTopicRegistration> & val) {
    topic_registrations = val;
  }

  bool operator == (const TRegisterSubscriberRequest & rhs) const
  {
    if (!(protocol_version == rhs.protocol_version))
      return false;
    if (!(subscriber_id == rhs.subscriber_id))
      return false;
    if (!(subscriber_location == rhs.subscriber_location))
      return false;
    if (!(topic_registrations == rhs.topic_registrations))
      return false;
    return true;
  }
  bool operator != (const TRegisterSubscriberRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRegisterSubscriberRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TRegisterSubscriberRequest &a, TRegisterSubscriberRequest &b);

typedef struct _TRegisterSubscriberResponse__isset {
  _TRegisterSubscriberResponse__isset() : registration_id(false) {}
  bool registration_id;
} _TRegisterSubscriberResponse__isset;

class TRegisterSubscriberResponse {
 public:

  static const char* ascii_fingerprint; // = "95ABC78C783842477A1610D711268739";
  static const uint8_t binary_fingerprint[16]; // = {0x95,0xAB,0xC7,0x8C,0x78,0x38,0x42,0x47,0x7A,0x16,0x10,0xD7,0x11,0x26,0x87,0x39};

  TRegisterSubscriberResponse() {
  }

  virtual ~TRegisterSubscriberResponse() throw() {}

   ::impala::TStatus status;
   ::impala::TUniqueId registration_id;

  _TRegisterSubscriberResponse__isset __isset;

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
  }

  void __set_registration_id(const  ::impala::TUniqueId& val) {
    registration_id = val;
    __isset.registration_id = true;
  }

  bool operator == (const TRegisterSubscriberResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.registration_id != rhs.__isset.registration_id)
      return false;
    else if (__isset.registration_id && !(registration_id == rhs.registration_id))
      return false;
    return true;
  }
  bool operator != (const TRegisterSubscriberResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRegisterSubscriberResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TRegisterSubscriberResponse &a, TRegisterSubscriberResponse &b);

typedef struct _TUpdateStateRequest__isset {
  _TUpdateStateRequest__isset() : registration_id(false) {}
  bool registration_id;
} _TUpdateStateRequest__isset;

class TUpdateStateRequest {
 public:

  static const char* ascii_fingerprint; // = "A59C926C9D9ECF6426124D50386B433B";
  static const uint8_t binary_fingerprint[16]; // = {0xA5,0x9C,0x92,0x6C,0x9D,0x9E,0xCF,0x64,0x26,0x12,0x4D,0x50,0x38,0x6B,0x43,0x3B};

  TUpdateStateRequest() : protocol_version((StatestoreServiceVersion::type)0) {
    protocol_version = (StatestoreServiceVersion::type)0;

  }

  virtual ~TUpdateStateRequest() throw() {}

  StatestoreServiceVersion::type protocol_version;
  std::map<std::string, TTopicDelta>  topic_deltas;
   ::impala::TUniqueId registration_id;

  _TUpdateStateRequest__isset __isset;

  void __set_protocol_version(const StatestoreServiceVersion::type val) {
    protocol_version = val;
  }

  void __set_topic_deltas(const std::map<std::string, TTopicDelta> & val) {
    topic_deltas = val;
  }

  void __set_registration_id(const  ::impala::TUniqueId& val) {
    registration_id = val;
    __isset.registration_id = true;
  }

  bool operator == (const TUpdateStateRequest & rhs) const
  {
    if (!(protocol_version == rhs.protocol_version))
      return false;
    if (!(topic_deltas == rhs.topic_deltas))
      return false;
    if (__isset.registration_id != rhs.__isset.registration_id)
      return false;
    else if (__isset.registration_id && !(registration_id == rhs.registration_id))
      return false;
    return true;
  }
  bool operator != (const TUpdateStateRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUpdateStateRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TUpdateStateRequest &a, TUpdateStateRequest &b);

typedef struct _TUpdateStateResponse__isset {
  _TUpdateStateResponse__isset() : skipped(false) {}
  bool skipped;
} _TUpdateStateResponse__isset;

class TUpdateStateResponse {
 public:

  static const char* ascii_fingerprint; // = "D43731EB2BC39FDD742A01EAC89A6DC8";
  static const uint8_t binary_fingerprint[16]; // = {0xD4,0x37,0x31,0xEB,0x2B,0xC3,0x9F,0xDD,0x74,0x2A,0x01,0xEA,0xC8,0x9A,0x6D,0xC8};

  TUpdateStateResponse() : skipped(0) {
  }

  virtual ~TUpdateStateResponse() throw() {}

   ::impala::TStatus status;
  std::vector<TTopicDelta>  topic_updates;
  bool skipped;

  _TUpdateStateResponse__isset __isset;

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
  }

  void __set_topic_updates(const std::vector<TTopicDelta> & val) {
    topic_updates = val;
  }

  void __set_skipped(const bool val) {
    skipped = val;
    __isset.skipped = true;
  }

  bool operator == (const TUpdateStateResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(topic_updates == rhs.topic_updates))
      return false;
    if (__isset.skipped != rhs.__isset.skipped)
      return false;
    else if (__isset.skipped && !(skipped == rhs.skipped))
      return false;
    return true;
  }
  bool operator != (const TUpdateStateResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUpdateStateResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TUpdateStateResponse &a, TUpdateStateResponse &b);

typedef struct _THeartbeatRequest__isset {
  _THeartbeatRequest__isset() : registration_id(false) {}
  bool registration_id;
} _THeartbeatRequest__isset;

class THeartbeatRequest {
 public:

  static const char* ascii_fingerprint; // = "83CF95E7F6BE901BBAB54DE322F32AE8";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0xCF,0x95,0xE7,0xF6,0xBE,0x90,0x1B,0xBA,0xB5,0x4D,0xE3,0x22,0xF3,0x2A,0xE8};

  THeartbeatRequest() {
  }

  virtual ~THeartbeatRequest() throw() {}

   ::impala::TUniqueId registration_id;

  _THeartbeatRequest__isset __isset;

  void __set_registration_id(const  ::impala::TUniqueId& val) {
    registration_id = val;
    __isset.registration_id = true;
  }

  bool operator == (const THeartbeatRequest & rhs) const
  {
    if (__isset.registration_id != rhs.__isset.registration_id)
      return false;
    else if (__isset.registration_id && !(registration_id == rhs.registration_id))
      return false;
    return true;
  }
  bool operator != (const THeartbeatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THeartbeatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(THeartbeatRequest &a, THeartbeatRequest &b);


class THeartbeatResponse {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  THeartbeatResponse() {
  }

  virtual ~THeartbeatResponse() throw() {}


  bool operator == (const THeartbeatResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const THeartbeatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THeartbeatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(THeartbeatResponse &a, THeartbeatResponse &b);

} // namespace

#endif
