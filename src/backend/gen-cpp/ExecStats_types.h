/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ExecStats_TYPES_H
#define ExecStats_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Status_types.h"
#include "Types_types.h"


namespace impala {

struct TExecState {
  enum type {
    REGISTERED = 0,
    PLANNING = 1,
    QUEUED = 2,
    RUNNING = 3,
    FINISHED = 4,
    CANCELLED = 5,
    FAILED = 6
  };
};

extern const std::map<int, const char*> _TExecState_VALUES_TO_NAMES;

typedef struct _TExecStats__isset {
  _TExecStats__isset() : latency_ns(false), cpu_time_ns(false), cardinality(false), memory_used(false) {}
  bool latency_ns;
  bool cpu_time_ns;
  bool cardinality;
  bool memory_used;
} _TExecStats__isset;

class TExecStats {
 public:

  static const char* ascii_fingerprint; // = "7205589F03CB55DF8A7EFA402F250E38";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x05,0x58,0x9F,0x03,0xCB,0x55,0xDF,0x8A,0x7E,0xFA,0x40,0x2F,0x25,0x0E,0x38};

  TExecStats() : latency_ns(0), cpu_time_ns(0), cardinality(0), memory_used(0) {
  }

  virtual ~TExecStats() throw() {}

  int64_t latency_ns;
  int64_t cpu_time_ns;
  int64_t cardinality;
  int64_t memory_used;

  _TExecStats__isset __isset;

  void __set_latency_ns(const int64_t val) {
    latency_ns = val;
    __isset.latency_ns = true;
  }

  void __set_cpu_time_ns(const int64_t val) {
    cpu_time_ns = val;
    __isset.cpu_time_ns = true;
  }

  void __set_cardinality(const int64_t val) {
    cardinality = val;
    __isset.cardinality = true;
  }

  void __set_memory_used(const int64_t val) {
    memory_used = val;
    __isset.memory_used = true;
  }

  bool operator == (const TExecStats & rhs) const
  {
    if (__isset.latency_ns != rhs.__isset.latency_ns)
      return false;
    else if (__isset.latency_ns && !(latency_ns == rhs.latency_ns))
      return false;
    if (__isset.cpu_time_ns != rhs.__isset.cpu_time_ns)
      return false;
    else if (__isset.cpu_time_ns && !(cpu_time_ns == rhs.cpu_time_ns))
      return false;
    if (__isset.cardinality != rhs.__isset.cardinality)
      return false;
    else if (__isset.cardinality && !(cardinality == rhs.cardinality))
      return false;
    if (__isset.memory_used != rhs.__isset.memory_used)
      return false;
    else if (__isset.memory_used && !(memory_used == rhs.memory_used))
      return false;
    return true;
  }
  bool operator != (const TExecStats &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TExecStats & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TExecStats &a, TExecStats &b);

typedef struct _TPlanNodeExecSummary__isset {
  _TPlanNodeExecSummary__isset() : label_detail(false), estimated_stats(false), exec_stats(false), is_active(false), is_broadcast(false) {}
  bool label_detail;
  bool estimated_stats;
  bool exec_stats;
  bool is_active;
  bool is_broadcast;
} _TPlanNodeExecSummary__isset;

class TPlanNodeExecSummary {
 public:

  static const char* ascii_fingerprint; // = "E4E4D490253CAF1386594CC26A897D28";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0xE4,0xD4,0x90,0x25,0x3C,0xAF,0x13,0x86,0x59,0x4C,0xC2,0x6A,0x89,0x7D,0x28};

  TPlanNodeExecSummary() : node_id(0), fragment_id(0), label(), label_detail(), num_children(0), is_broadcast(0) {
  }

  virtual ~TPlanNodeExecSummary() throw() {}

   ::impala::TPlanNodeId node_id;
  int32_t fragment_id;
  std::string label;
  std::string label_detail;
  int32_t num_children;
  TExecStats estimated_stats;
  std::vector<TExecStats>  exec_stats;
  std::vector<bool>  is_active;
  bool is_broadcast;

  _TPlanNodeExecSummary__isset __isset;

  void __set_node_id(const  ::impala::TPlanNodeId val) {
    node_id = val;
  }

  void __set_fragment_id(const int32_t val) {
    fragment_id = val;
  }

  void __set_label(const std::string& val) {
    label = val;
  }

  void __set_label_detail(const std::string& val) {
    label_detail = val;
    __isset.label_detail = true;
  }

  void __set_num_children(const int32_t val) {
    num_children = val;
  }

  void __set_estimated_stats(const TExecStats& val) {
    estimated_stats = val;
    __isset.estimated_stats = true;
  }

  void __set_exec_stats(const std::vector<TExecStats> & val) {
    exec_stats = val;
    __isset.exec_stats = true;
  }

  void __set_is_active(const std::vector<bool> & val) {
    is_active = val;
    __isset.is_active = true;
  }

  void __set_is_broadcast(const bool val) {
    is_broadcast = val;
    __isset.is_broadcast = true;
  }

  bool operator == (const TPlanNodeExecSummary & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    if (!(fragment_id == rhs.fragment_id))
      return false;
    if (!(label == rhs.label))
      return false;
    if (__isset.label_detail != rhs.__isset.label_detail)
      return false;
    else if (__isset.label_detail && !(label_detail == rhs.label_detail))
      return false;
    if (!(num_children == rhs.num_children))
      return false;
    if (__isset.estimated_stats != rhs.__isset.estimated_stats)
      return false;
    else if (__isset.estimated_stats && !(estimated_stats == rhs.estimated_stats))
      return false;
    if (__isset.exec_stats != rhs.__isset.exec_stats)
      return false;
    else if (__isset.exec_stats && !(exec_stats == rhs.exec_stats))
      return false;
    if (__isset.is_active != rhs.__isset.is_active)
      return false;
    else if (__isset.is_active && !(is_active == rhs.is_active))
      return false;
    if (__isset.is_broadcast != rhs.__isset.is_broadcast)
      return false;
    else if (__isset.is_broadcast && !(is_broadcast == rhs.is_broadcast))
      return false;
    return true;
  }
  bool operator != (const TPlanNodeExecSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPlanNodeExecSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPlanNodeExecSummary &a, TPlanNodeExecSummary &b);

typedef struct _TExecProgress__isset {
  _TExecProgress__isset() : total_scan_ranges(false), num_completed_scan_ranges(false) {}
  bool total_scan_ranges;
  bool num_completed_scan_ranges;
} _TExecProgress__isset;

class TExecProgress {
 public:

  static const char* ascii_fingerprint; // = "0354D07C94CB8542872CA1277008860A";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0x54,0xD0,0x7C,0x94,0xCB,0x85,0x42,0x87,0x2C,0xA1,0x27,0x70,0x08,0x86,0x0A};

  TExecProgress() : total_scan_ranges(0), num_completed_scan_ranges(0) {
  }

  virtual ~TExecProgress() throw() {}

  int64_t total_scan_ranges;
  int64_t num_completed_scan_ranges;

  _TExecProgress__isset __isset;

  void __set_total_scan_ranges(const int64_t val) {
    total_scan_ranges = val;
    __isset.total_scan_ranges = true;
  }

  void __set_num_completed_scan_ranges(const int64_t val) {
    num_completed_scan_ranges = val;
    __isset.num_completed_scan_ranges = true;
  }

  bool operator == (const TExecProgress & rhs) const
  {
    if (__isset.total_scan_ranges != rhs.__isset.total_scan_ranges)
      return false;
    else if (__isset.total_scan_ranges && !(total_scan_ranges == rhs.total_scan_ranges))
      return false;
    if (__isset.num_completed_scan_ranges != rhs.__isset.num_completed_scan_ranges)
      return false;
    else if (__isset.num_completed_scan_ranges && !(num_completed_scan_ranges == rhs.num_completed_scan_ranges))
      return false;
    return true;
  }
  bool operator != (const TExecProgress &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TExecProgress & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TExecProgress &a, TExecProgress &b);

typedef struct _TExecSummary__isset {
  _TExecSummary__isset() : status(false), nodes(false), exch_to_sender_map(false), error_logs(false), progress(false) {}
  bool status;
  bool nodes;
  bool exch_to_sender_map;
  bool error_logs;
  bool progress;
} _TExecSummary__isset;

class TExecSummary {
 public:

  static const char* ascii_fingerprint; // = "53EB232C6F7E93E943A8C6F2E08D7338";
  static const uint8_t binary_fingerprint[16]; // = {0x53,0xEB,0x23,0x2C,0x6F,0x7E,0x93,0xE9,0x43,0xA8,0xC6,0xF2,0xE0,0x8D,0x73,0x38};

  TExecSummary() : state((TExecState::type)0) {
  }

  virtual ~TExecSummary() throw() {}

  TExecState::type state;
   ::impala::TStatus status;
  std::vector<TPlanNodeExecSummary>  nodes;
  std::map<int32_t, int32_t>  exch_to_sender_map;
  std::vector<std::string>  error_logs;
  TExecProgress progress;

  _TExecSummary__isset __isset;

  void __set_state(const TExecState::type val) {
    state = val;
  }

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
    __isset.status = true;
  }

  void __set_nodes(const std::vector<TPlanNodeExecSummary> & val) {
    nodes = val;
    __isset.nodes = true;
  }

  void __set_exch_to_sender_map(const std::map<int32_t, int32_t> & val) {
    exch_to_sender_map = val;
    __isset.exch_to_sender_map = true;
  }

  void __set_error_logs(const std::vector<std::string> & val) {
    error_logs = val;
    __isset.error_logs = true;
  }

  void __set_progress(const TExecProgress& val) {
    progress = val;
    __isset.progress = true;
  }

  bool operator == (const TExecSummary & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.nodes != rhs.__isset.nodes)
      return false;
    else if (__isset.nodes && !(nodes == rhs.nodes))
      return false;
    if (__isset.exch_to_sender_map != rhs.__isset.exch_to_sender_map)
      return false;
    else if (__isset.exch_to_sender_map && !(exch_to_sender_map == rhs.exch_to_sender_map))
      return false;
    if (__isset.error_logs != rhs.__isset.error_logs)
      return false;
    else if (__isset.error_logs && !(error_logs == rhs.error_logs))
      return false;
    if (__isset.progress != rhs.__isset.progress)
      return false;
    else if (__isset.progress && !(progress == rhs.progress))
      return false;
    return true;
  }
  bool operator != (const TExecSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TExecSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TExecSummary &a, TExecSummary &b);

} // namespace

#endif
