/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ExecStats_types.h"

#include <algorithm>

namespace impala {

int _kTExecStateValues[] = {
  TExecState::REGISTERED,
  TExecState::PLANNING,
  TExecState::QUEUED,
  TExecState::RUNNING,
  TExecState::FINISHED,
  TExecState::CANCELLED,
  TExecState::FAILED
};
const char* _kTExecStateNames[] = {
  "REGISTERED",
  "PLANNING",
  "QUEUED",
  "RUNNING",
  "FINISHED",
  "CANCELLED",
  "FAILED"
};
const std::map<int, const char*> _TExecState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kTExecStateValues, _kTExecStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* TExecStats::ascii_fingerprint = "7205589F03CB55DF8A7EFA402F250E38";
const uint8_t TExecStats::binary_fingerprint[16] = {0x72,0x05,0x58,0x9F,0x03,0xCB,0x55,0xDF,0x8A,0x7E,0xFA,0x40,0x2F,0x25,0x0E,0x38};

uint32_t TExecStats::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->latency_ns);
          this->__isset.latency_ns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cpu_time_ns);
          this->__isset.cpu_time_ns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cardinality);
          this->__isset.cardinality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->memory_used);
          this->__isset.memory_used = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TExecStats::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("TExecStats");

  if (this->__isset.latency_ns) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("latency_ns", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->latency_ns);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cpu_time_ns) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("cpu_time_ns", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->cpu_time_ns);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cardinality) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("cardinality", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->cardinality);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.memory_used) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("memory_used", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->memory_used);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TExecStats &a, TExecStats &b) {
  using ::std::swap;
  swap(a.latency_ns, b.latency_ns);
  swap(a.cpu_time_ns, b.cpu_time_ns);
  swap(a.cardinality, b.cardinality);
  swap(a.memory_used, b.memory_used);
  swap(a.__isset, b.__isset);
}

const char* TPlanNodeExecSummary::ascii_fingerprint = "E4E4D490253CAF1386594CC26A897D28";
const uint8_t TPlanNodeExecSummary::binary_fingerprint[16] = {0xE4,0xE4,0xD4,0x90,0x25,0x3C,0xAF,0x13,0x86,0x59,0x4C,0xC2,0x6A,0x89,0x7D,0x28};

uint32_t TPlanNodeExecSummary::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_node_id = false;
  bool isset_fragment_id = false;
  bool isset_label = false;
  bool isset_num_children = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->node_id);
          isset_node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fragment_id);
          isset_fragment_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->label);
          isset_label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->label_detail);
          this->__isset.label_detail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_children);
          isset_num_children = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->estimated_stats.read(iprot);
          this->__isset.estimated_stats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->exec_stats.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->exec_stats.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->exec_stats[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.exec_stats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->is_active.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->is_active.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readBool(this->is_active[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.is_active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_broadcast);
          this->__isset.is_broadcast = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_node_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fragment_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_label)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_num_children)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TPlanNodeExecSummary::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("TPlanNodeExecSummary");

  ++fcnt;
  xfer += oprot->writeFieldBegin("node_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->node_id);
  xfer += oprot->writeFieldEnd();

  ++fcnt;
  xfer += oprot->writeFieldBegin("fragment_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->fragment_id);
  xfer += oprot->writeFieldEnd();

  ++fcnt;
  xfer += oprot->writeFieldBegin("label", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->label);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.label_detail) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("label_detail", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->label_detail);
    xfer += oprot->writeFieldEnd();
  }
  ++fcnt;
  xfer += oprot->writeFieldBegin("num_children", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->num_children);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.estimated_stats) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("estimated_stats", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->estimated_stats.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exec_stats) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("exec_stats", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->exec_stats.size()));
      std::vector<TExecStats> ::const_iterator _iter10;
      for (_iter10 = this->exec_stats.begin(); _iter10 != this->exec_stats.end(); ++_iter10)
      {
        xfer += (*_iter10).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.is_active) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("is_active", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->is_active.size()));
      std::vector<bool> ::const_iterator _iter11;
      for (_iter11 = this->is_active.begin(); _iter11 != this->is_active.end(); ++_iter11)
      {
        xfer += oprot->writeBool((*_iter11));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.is_broadcast) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("is_broadcast", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->is_broadcast);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPlanNodeExecSummary &a, TPlanNodeExecSummary &b) {
  using ::std::swap;
  swap(a.node_id, b.node_id);
  swap(a.fragment_id, b.fragment_id);
  swap(a.label, b.label);
  swap(a.label_detail, b.label_detail);
  swap(a.num_children, b.num_children);
  swap(a.estimated_stats, b.estimated_stats);
  swap(a.exec_stats, b.exec_stats);
  swap(a.is_active, b.is_active);
  swap(a.is_broadcast, b.is_broadcast);
  swap(a.__isset, b.__isset);
}

const char* TExecProgress::ascii_fingerprint = "0354D07C94CB8542872CA1277008860A";
const uint8_t TExecProgress::binary_fingerprint[16] = {0x03,0x54,0xD0,0x7C,0x94,0xCB,0x85,0x42,0x87,0x2C,0xA1,0x27,0x70,0x08,0x86,0x0A};

uint32_t TExecProgress::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->total_scan_ranges);
          this->__isset.total_scan_ranges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num_completed_scan_ranges);
          this->__isset.num_completed_scan_ranges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TExecProgress::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("TExecProgress");

  if (this->__isset.total_scan_ranges) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("total_scan_ranges", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->total_scan_ranges);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.num_completed_scan_ranges) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("num_completed_scan_ranges", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->num_completed_scan_ranges);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TExecProgress &a, TExecProgress &b) {
  using ::std::swap;
  swap(a.total_scan_ranges, b.total_scan_ranges);
  swap(a.num_completed_scan_ranges, b.num_completed_scan_ranges);
  swap(a.__isset, b.__isset);
}

const char* TExecSummary::ascii_fingerprint = "53EB232C6F7E93E943A8C6F2E08D7338";
const uint8_t TExecSummary::binary_fingerprint[16] = {0x53,0xEB,0x23,0x2C,0x6F,0x7E,0x93,0xE9,0x43,0xA8,0xC6,0xF2,0xE0,0x8D,0x73,0x38};

uint32_t TExecSummary::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_state = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->state = (TExecState::type)ecast12;
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->nodes.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += this->nodes[_i17].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->exch_to_sender_map.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _ktype19;
            ::apache::thrift::protocol::TType _vtype20;
            xfer += iprot->readMapBegin(_ktype19, _vtype20, _size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              int32_t _key23;
              xfer += iprot->readI32(_key23);
              int32_t& _val24 = this->exch_to_sender_map[_key23];
              xfer += iprot->readI32(_val24);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.exch_to_sender_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->error_logs.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            xfer += iprot->readListBegin(_etype28, _size25);
            this->error_logs.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              xfer += iprot->readString(this->error_logs[_i29]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.error_logs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->progress.read(iprot);
          this->__isset.progress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TExecSummary::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("TExecSummary");

  ++fcnt;
  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.status) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->status.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nodes) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->nodes.size()));
      std::vector<TPlanNodeExecSummary> ::const_iterator _iter30;
      for (_iter30 = this->nodes.begin(); _iter30 != this->nodes.end(); ++_iter30)
      {
        xfer += (*_iter30).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exch_to_sender_map) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("exch_to_sender_map", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->exch_to_sender_map.size()));
      std::map<int32_t, int32_t> ::const_iterator _iter31;
      for (_iter31 = this->exch_to_sender_map.begin(); _iter31 != this->exch_to_sender_map.end(); ++_iter31)
      {
        xfer += oprot->writeI32(_iter31->first);
        xfer += oprot->writeI32(_iter31->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.error_logs) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("error_logs", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->error_logs.size()));
      std::vector<std::string> ::const_iterator _iter32;
      for (_iter32 = this->error_logs.begin(); _iter32 != this->error_logs.end(); ++_iter32)
      {
        xfer += oprot->writeString((*_iter32));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.progress) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("progress", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->progress.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TExecSummary &a, TExecSummary &b) {
  using ::std::swap;
  swap(a.state, b.state);
  swap(a.status, b.status);
  swap(a.nodes, b.nodes);
  swap(a.exch_to_sender_map, b.exch_to_sender_map);
  swap(a.error_logs, b.error_logs);
  swap(a.progress, b.progress);
  swap(a.__isset, b.__isset);
}

} // namespace
